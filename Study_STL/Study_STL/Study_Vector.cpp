// Study_STL.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <vector>

using namespace std;
/*
int main()
{
	cout << "This is Study_Vector" << endl;

	cout << "<Vector>\n"
		<< ": 템플릿 기반이므로 임의 타입을 요소로 가질 수 있고, 요소 개수에 따라 동적으로 메모리를 관리한다.\n"
		<< ": 동일 타입의 자료 집합으로써 흔히 배열에 비유를 많이 한다.\n"
		<< ": 다른 컨테이너들에 비해 구조가 단순하고 사용 방법이 쉬우며 속도도 빠른 편. 실용적이라 활용빈도가 높다.\n"
		<< ": 배열을 대체할 수 있다.\n"
		<< ": 각 요소는 연속된 위치에 배치되므로 임의 위치를 빠른 속도로 엑세스 할 수 있다.\n"
		<< ": 취상위 레벨의 임의 접근 반복자를 제공하므로, STL의 거의 모든 알고리즘 사용이 가능하다.\n"
		<< ": 삽입, 삭제 속도가 느리다. 중간 삽입, 삭제는 더 느리다.\n"
		<< ": 속도는 보통 배열이 Vector보다 빠르다.\n"
		<< ": STL의 컨테이너인 만큼 제공하는 함수가 많고, 유용하다.\n"
		<< ": \n"
		<< endl;

	cout << "<Vector를 사용해야 하는 경우>\n"
		<< ": 저장할 데이터의 개수가 가변적일 때\n"
		<< ": 중간에 데이터 삽입, 삭제가 적거나 없을 때\n"
		<< ": 저장된 요소를 자주 검색하지 않을 때\n"
		<< ": 랜덤 엑세스를 자주할 때\n"
		<< ": \n"
		<< endl;

	cout << "<Vector와 배열>\n"
		<< ": 배열의 크기는 고정이지만 Vector는 요소 개수에 따라 자동(동적)으로 늘어난다.\n"
		<< ": 배열과 Vector 모두 사용 방법이 쉽다.\n"
		<< ": 배열과 Vector 모두 데이터를 연속된 위치에 순차적으로 저장한다.\n"
		<< ": 연속된 위치에 순차적으로 저장하므로 랜덤 엑세스가 가능하다.\n"
		<< ": C에서는 포인터로 배열의 값에 접근 및 수정할 수 있지만, Vector는 iterator라는 것을 사용한다.\n"
		<< ": \n"
		<< endl;

	vector<int> v_int;

	v_int.push_back(1);
	v_int.push_back(2);
	v_int.push_back(3);
	v_int.push_back(4);
	v_int.push_back(5);

	for (int i = 0; i < v_int.size(); i++) {
		cout << "v_int[" << i << "] : " << v_int[i] << endl;
	}
	
	cout << endl;
	cout << "v_int.begin() : " << *v_int.begin() << endl;
	//cout << "v_int.end() : " << *v_int.end() << endl; // 에러남. 왜?
	cout << "v_int.size() : " << v_int.size() << endl;

}
*/
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
